@{
    Layout = "_GameLayout";
}

<!DOCTYPE html>
<html>
<head>
    <title>3D Dice Game</title>
    <link rel="stylesheet" href="~/css/Room.css" asp-append-version="true" />
    <style>
        #toast {
            visibility: hidden;
            min-width: 250px;
            margin-left: -125px;
            background-color: #333;
            color: #fff;
            text-align: center;
            border-radius: 4px;
            padding: 16px;
            position: fixed;
            z-index: 1000;
            left: 50%;
            bottom: 30px;
            font-size: 17px;
            opacity: 0;
            transition: opacity 0.5s ease, visibility 0.5s ease 0.5s;
        }

            #toast.show {
                visibility: visible;
                opacity: 1;
                transition-delay: 0s;
            }
    </style>
</head>
<body>
    <div class="main-layout">
        <aside class="sidebar" id="playerContainer"></aside>

        <section class="game-section">
            <div class="dice-wrapper">
                <!-- Dice containers: dice1, dice2, dice3 -->
                <div class="containerD" id="dice1">
                    <div class="left">
                        <img src="~/Assets/bau.png" alt="bau.png" />
                    </div>
                    <div class="right">
                        <img src="~/Assets/nai.png" alt="nai.png" />
                    </div>
                    <div class="front">
                        <img src="~/Assets/cua.png" alt="cua.png" />
                    </div>
                    <div class="back">
                        <img src="~/Assets/ca.png" alt="ca.png" />
                    </div>
                    <div class="up">
                        <img src="~/Assets/tom.png" alt="tom.png" />
                    </div>
                    <div class="down">
                        <img src="~/Assets/ga.png" alt="ga.png" />
                    </div>

                </div>
                <div class="containerD" id="dice2">
                    <div class="left">
                        <img src="~/Assets/bau.png" alt="bau.png" />
                    </div>
                    <div class="right">
                        <img src="~/Assets/nai.png" alt="nai.png" />
                    </div>
                    <div class="front">
                        <img src="~/Assets/cua.png" alt="cua.png" />
                    </div>
                    <div class="back">
                        <img src="~/Assets/ca.png" alt="ca.png" />
                    </div>
                    <div class="up">
                        <img src="~/Assets/tom.png" alt="tom.png" />
                    </div>
                    <div class="down">
                        <img src="~/Assets/ga.png" alt="ga.png" />
                    </div>
                </div>
                <div class="containerD" id="dice3">
                    <div class="left">
                        <img src="~/Assets/bau.png" alt="bau.png" />
                    </div>
                    <div class="right">
                        <img src="~/Assets/nai.png" alt="nai.png" />
                    </div>
                    <div class="front">
                        <img src="~/Assets/cua.png" alt="cua.png" />
                    </div>
                    <div class="back">
                        <img src="~/Assets/ca.png" alt="ca.png" />
                    </div>
                    <div class="up">
                        <img src="~/Assets/tom.png" alt="tom.png" />
                    </div>
                    <div class="down">
                        <img src="~/Assets/ga.png" alt="ga.png" />
                    </div>
                </div>
            </div>
            <!-- Prediction Buttons -->
            <div class="prediction-buttons">
                <button class="predict-btn" data-value="1">Bầu</button>
                <button class="predict-btn" data-value="2">Nai</button>
                <button class="predict-btn" data-value="3">Cua</button>
                <button class="predict-btn" data-value="4">Cá</button>
                <button class="predict-btn" data-value="5">Tôm</button>
                <button class="predict-btn" data-value="6">gà</button>
            </div>
            <div class="balance-section">
                <p>Balance: $<span id="balanceDisplay">@ViewBag.Balance</span></p>
                <input id="betAmountInput" type="number" placeholder="Enter Bet Amount" min="1" />
            </div>
            <button class="btn" id="spinBtn">Spin</button>
            <p id="resultText"></p>
            <div class="bgeffect" id="bgeffect"></div>
            <!-- Result Display -->
            <div class="result" id="resultText"></div>
        </section>
    </div>

    <div id="toast"></div>
    <!-- Chat popup -->
    <div id="chatBox" style="
    position: fixed;
    bottom: 20px;
    right: 20px;
    width: 300px;
    max-height: 400px;
    background-color: #fff;
    border: 1px solid #ccc;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
    display: flex;
    flex-direction: column;
    z-index: 1000;
    font-family: sans-serif;
color:black;
">
        <div style="background-color: #007bff; color: white; padding: 10px; font-weight: bold;">💬 Room Chat</div>
        <div id="chatMessages" style="flex: 1; padding: 10px; overflow-y: auto;"></div>
        <div style="display: flex; border-top: 1px solid #ccc;">
            <input id="chatInput" type="text" placeholder="Type message..." style="flex: 1; padding: 8px; border: none;" />
            <button id="sendChatBtn" style="padding: 8px 12px; background-color: #007bff; color: white; border: none;">Send</button>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        const btn = document.querySelector(".btn");
        const efx = document.querySelector(".bgeffect");
        const diceContainers = [
            document.querySelector("#dice1"),
            document.querySelector("#dice2"),
            document.querySelector("#dice3")
        ];
        const predictButtons = document.querySelectorAll(".predict-btn");
        const resultDiv = document.getElementById("resultText");

        let userPrediction = null;

        // Rotation positions
        const rotations = {
            4: [0, 0],
            3: [0, 180],
            2: [0, 90],
            1: [0, -90],
            5: [-90, 0],
            6: [90, 0]
        };

        // Choose prediction
        predictButtons.forEach(btn => {
            btn.addEventListener("click", () => {
                userPrediction = parseInt(btn.dataset.value);
                predictButtons.forEach(b => b.style.backgroundColor = "");
                btn.style.backgroundColor = "#aaffaa"; // highlight selected
            });
        });
        const balanceDisplay = document.getElementById("balanceDisplay");
        const betAmountInput = document.getElementById("betAmountInput");
        // Spin dice and check result
        // Spin dice and check result
        btn.addEventListener("click", async () => {
            if (!userPrediction) {
                resultDiv.textContent = "Please choose a number to predict.";
                return;
            }

            const betAmount = parseInt(betAmountInput.value);
            if (isNaN(betAmount) || betAmount <= 0) {
                resultDiv.textContent = "Please enter a valid bet amount.";
                return;
            }

            const currentBalance = parseInt(balanceDisplay.textContent);
            if (betAmount > currentBalance) {
                resultDiv.textContent = "Insufficient balance for this bet.";
                return;
            }

            // Disable spin button to prevent multiple clicks
            btn.disabled = true;

            // Add spinning animation to all dice
            diceContainers.forEach(dice => {
                dice.style.transition = "transform 2s ease-out";
                dice.style.transform = `rotateX(${360 * 2}deg) rotateY(${360 * 2}deg)`; // Spin multiple times
            });

            try {
                // Call the server to handle the spin
                const response = await fetch(`@Url.Action("BauCuaSpin", "Game")?prediction=${userPrediction}&betAmount=${betAmount}&roomId=${roomId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const result = await response.json();

                if (result.success) {
                    // Wait a bit for the spinning effect, then show results
                    setTimeout(() => {
                        // Apply final rotations based on dice results
                        result.diceResults.forEach((diceValue, index) => {
                            const rotation = rotations[diceValue];
                            if (rotation && diceContainers[index]) {
                                diceContainers[index].style.transform =
                                    `rotateX(${rotation[0]}deg) rotateY(${rotation[1]}deg)`;
                            }
                        });
                    }, 1500); // Wait 1.5 seconds before showing final position

                    balanceDisplay.textContent = result.newBalance;

                    const nameMap = {
                        1: "Bầu",
                        2: "Nai",
                        3: "Cua",
                        4: "Cá",
                        5: "Tôm",
                        6: "Gà"
                    };

                    const resultNames = result.diceResults.map(num => nameMap[num]);
                    let message = `Ra: ${resultNames.join(", ")} — `;
                    if (result.matchCount === 0) {
                        message += "❌ Không trúng.";
                    } else {
                        message += `✅ Trúng ${result.matchCount} lần! Thắng: $${result.winnings}`;
                    }

                    // Show result after dice stop spinning
                    setTimeout(() => {
                        resultDiv.textContent = message;
                    }, 2000);
                } else {
                    resultDiv.textContent = result.error;
                }
            } catch (error) {
                console.error('Error during spin:', error);
                resultDiv.textContent = "There was an error processing your bet.";
            } finally {
                // Re-enable button after animation completes
                setTimeout(() => {
                    connection.invoke("ResetAllPlayersReadyStatus", roomId)
                        .catch(err => {
                            console.error("Error resetting ready status:", err);
                        });
                    btn.disabled = false;
                    btn.textContent = "Spin";
                }, 2000);
            }
        });


        // Toast display helper
        function showToast(message) {
            const toast = document.getElementById("toast");
            toast.textContent = message;
            toast.classList.add("show");
            setTimeout(() => {
                toast.classList.remove("show");
            }, 3500);
        }

        document.addEventListener("click", function (event) {
            if (event.target.classList.contains("readyBtn")) {
                connection.invoke("SetReadyStatus", roomId, playerId, true)
                    .then(() => {
                        event.target.disabled = true;
                        event.target.textContent = "Ready ✔";
                    })
                    .catch(err => {
                        console.error("Error setting ready status:", err);
                        showToast("Could not set ready status.");
                    });
            }
        });

        // Grab roomId and playerId from server ViewBag
        const roomId = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.RoomId));
        const playerId = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.PlayerId));

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/betHub?playerId=" + playerId)
            .configureLogging(signalR.LogLevel.Information)
            .build();

        connection.onreconnected(() => {
            console.log("Reconnected to SignalR hub");
            connection.invoke("UpdateOnlineStatus", playerId, true);
        });

        if (roomId && playerId) {
            connection.start()
                .then(() => {
                    console.log("Connected to SignalR hub.");
                    return connection.invoke("JoinRoom", roomId, playerId);
                })
                .catch(err => {
                    console.error("SignalR connection error:", err);
                    // No toast shown here intentionally
                });
        } else {
            console.error("Missing roomId or playerId");
        }
        connection.on("ReceiveMessage", function (username, message, time) {
            const msgDiv = document.createElement("div");
            msgDiv.innerHTML = `<strong>${username}</strong> <small>${time}</small><br>${message}`;
            msgDiv.style.marginBottom = "10px";

            const chatMessages = document.getElementById("chatMessages");
            chatMessages.appendChild(msgDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        });

        document.getElementById("sendChatBtn").addEventListener("click", function () {
            const input = document.getElementById("chatInput");
            const msg = input.value.trim();
            if (msg !== "") {
                connection.invoke("SendMessageToRoom", roomId, '@ViewBag.Username', msg)
                    .catch(err => console.error(err.toString()));
                input.value = "";
            }
        });

        document.getElementById("chatInput").addEventListener("keypress", function (e) {
            if (e.key === "Enter") {
                document.getElementById("sendChatBtn").click();
            }
        });
        // Show toast only if server calls ShowToast
        connection.on("ShowToast", function (message) {
            showToast(message);
        });

        connection.on("UpdatePlayerList", function (players) {
            const container = document.getElementById("playerContainer");
            container.innerHTML = "";

            const currentPlayerIdLower = (playerId || "").trim().toLowerCase();

            console.log(players);
            players.forEach(player => {
                const playerIdLower = (player.playerId || "").trim().toLowerCase();

                const div = document.createElement("div");
                div.className = "user-card";

                // Check if this is the current player and their ready status
                const isCurrentPlayer = playerIdLower === currentPlayerIdLower;
                const isReady = player.readyStatus === "Ready" || player.readyStatus === true;

                div.innerHTML = `
                            <h4>${player.username || "Unknown User"}</h4>
                            <p>Balance: ${player.balance}</p>
                            <p class="status">${isReady ? "Ready" : "Not Ready"}</p>
                            ${isCurrentPlayer ? `
                                <button class="readyBtn" ${isReady ? 'disabled' : ''}>
                                    ${isReady ? 'Ready ✔' : 'Ready'}
                                </button><br />
                                <a class="btn btn-outline-danger" href="/Home/Index">Quit</a>
                            ` : ""}
                        `;

                container.appendChild(div);
            });
        });


        // });
        // Your dice game JS code goes here (omitted for brevity)
    </script>
</body>
</html>
