@model Tuple<IEnumerable<EIUBetApp.Models.Player>, IEnumerable<EIUBetApp.Models.Room>>
@{
    ViewData["Title"] = "Rooms Dashboard";
    var currentPlayer = ViewBag.CurrentPlayer as EIUBetApp.Models.Player;
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/css/Lobby.css" asp-append-version="true" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
</head>
<body>
    <div class="container-fluid h-100">
        <div class="row h-100">
            <!-- Sidebar -->
            <aside class="col-md-3 sidebar d-flex flex-column">
                @if (currentPlayer != null)
                {
                    <div class="user-info">
                        <h4 id="username">@currentPlayer.User.Username</h4>
                        <p>Balance: <strong id="balance">$@currentPlayer.Balance.ToString("F2")</strong></p>
                        <input type="hidden" id="playerId" value="@currentPlayer.PlayerId" />
                    </div>
                }
                else
                {
                    <div class="user-info">
                        <h4 id="username">Guest</h4>
                        <p>Balance: <strong id="balance">$0.00</strong></p>
                    </div>
                }

                <h5 class="text-white mb-2">Online Users</h5>
                <div class="friends" id="friendsList">
                    @foreach (var player in Model.Item1)
                    {
                        <div class="friend">
                            <div class="friend-name">
                                <span class="status-dot"></span>
                                @player.User.Username
                            </div>
                            <button class="btn btn-sm btn-outline-light" onclick="invite('@player.User.Username')">Invite</button>
                        </div>
                    }
                </div>

                <button class="btn btn-outline-light logout-btn" onclick="logout()">Logout</button>
            </aside>

            <!-- Main Content -->
            <main class="col-md-9 p-4 bg-light">
                <h3>Available Rooms</h3>
                <div id="roomList">
                    @foreach (var room in Model.Item2)
                    {
                        <div class="room-card d-flex justify-content-between align-items-center">
                            <div>
                                <h5>@room.RoomName</h5>
                                <p class="mb-0">Room ID: @room.RoomId</p>
                            </div>
                            <button class="btn btn-sm btn-primary" onclick="joinRoom('@room.RoomId')">Join</button>
                        </div>
                    }
                </div>
            </main>
        </div>
    </div>

    @* <script> *@
    @*     const connection = new signalR.HubConnectionBuilder() *@
    @*         .withUrl("/betHub") *@
    @*         .build(); *@

    @*     // Start SignalR connection *@
    @*     connection.start().catch(err => console.error('SignalR Connection Error:', err.toString())); *@

    @*     // Join room by RoomId and PlayerId *@
    @*     async function joinRoom(roomId) { *@
    @*         const playerId = document.getElementById("playerId")?.value; *@
    @*         if (!playerId) { *@
    @*             alert("You must be logged in to join a room."); *@
    @*             return; *@
    @*         } *@

    @*         try { *@
    @*             // Call the JoinRoom hub method with roomId and playerId *@
    @*             await connection.invoke("JoinRoom", roomId, playerId); *@

    @*             // Redirect to the game room page *@
    @*              window.location.href = `/Game/BauCua?roomId=${roomId}`; *@
    @*         } catch (err) { *@
    @*             console.error("Failed to join room:", err); *@
    @*             alert("Failed to join room. Please try again."); *@
    @*         } *@
    @*     } *@

    @*     // Example real-time notification when a user joins a room *@
    @*     connection.on("UserJoined", function (username) { *@
    @*         alert(`${username} has joined the room!`); *@
    @*         // Optionally update UI here with new user info *@
    @*     }); *@


    @*     //handle invite users *@
    @*             function invite(username) { *@
    @*         const currentUsername = document.getElementById("username")?.textContent; *@

    @*         if (!currentUsername || !username) { *@
    @*             alert("Invalid invite request."); *@
    @*             return; *@
    @*         } *@

    @*         // Send the invite to the server via SignalR *@
    @*         connection.invoke("SendInvite", currentUsername, username) *@
    @*             .then(() => { *@
    @*                 console.log(`Invitation sent to ${username}`); *@
    @*             }) *@
    @*             .catch(err => { *@
    @*                 console.error("Failed to send invite:", err.toString()); *@
    @*             }); *@
    @*     } *@

    @* </script> *@


    <script>
        const username = document.getElementById("username")?.textContent?.trim() || "Guest";

        const connection = new signalR.HubConnectionBuilder()
            .withUrl(`/betHub?username=${encodeURIComponent(username)}`)
            .build();

        // Start the connection
        connection.start().catch(err => console.error("SignalR connection error:", err));

        // Join a room
        async function joinRoom(roomId) {
            const playerId = document.getElementById("playerId")?.value;
            if (!playerId) {
                alert("You must be logged in to join a room.");
                return;
            }

            try {
                await connection.invoke("JoinRoom", roomId, playerId);
                window.location.href = `/Game/BauCua?roomId=${roomId}`;
            } catch (err) {
                console.error("Join failed:", err);
            }
        }

        // Invite another user
        function invite(toUsername) {
            const fromUsername = document.getElementById("username")?.textContent?.trim();
            if (!fromUsername || !toUsername) return;

            connection.invoke("SendInvite", fromUsername, toUsername)
                .catch(err => console.error("Invite failed:", err));
        }

        // Handle receiving an invite
        connection.on("ReceiveInvite", function (fromUsername) {
            if (confirm(`${fromUsername} invited you to join a game. Accept?`)) {
                alert("You accepted the invite! Redirecting...");
                // You could redirect to a room or show available rooms
            }
        });

        // Optional: handle player list updates
        connection.on("UpdatePlayerList", function (players) {
            console.log("Updated player list:", players);
            // You can update UI here if needed
        });
    </script>

</body>
</html>
